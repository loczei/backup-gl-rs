use std::ffi::{CStr, CString};

use egui_glow::EguiGlow;
use glutin::{
    config::ConfigTemplateBuilder,
    context::{ContextAttributesBuilder, PossiblyCurrentContext},
    display::{Display, GetGlDisplay},
    prelude::{GlConfig, GlDisplay, NotCurrentGlContextSurfaceAccessor},
    surface::{Surface, WindowSurface},
};
use glutin_winit::{DisplayBuilder, GlWindow};
use raw_window_handle::HasRawWindowHandle;
use winit::{
    event_loop::EventLoop,
    window::{Window, WindowBuilder},
};

pub fn init_egui<T>(event_loop: &EventLoop<T>, address: CString) -> EguiGlow {
    let glow = unsafe {
        glow::Context::from_loader_function(|s| {
            let s = CString::new(s).unwrap();

            gl_display.get_proc_address(&s)
        })
    };

    let glow = std::sync::Arc::new(glow);

    egui_glow::EguiGlow::new(&event_loop, glow, None)
}
